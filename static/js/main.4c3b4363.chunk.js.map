{"version":3,"sources":["fetchUrlList.js","components/AveragesSummary.js","components/AveragesGraph.js","components/Averages.js","App.js","serviceWorker.js","index.js"],"names":["fetchUrlList","diesel","lpg","AveragesSummary","todaySummary","todayRetail","todayWholesale","todayGuidance","className","AveragesGraph","graphData","days","x1","month","retail","wholesale","monthNames","fuelData","labels","map","day","index","datasets","label","data","fill","backgroundColor","boarderColor","id","Averages","fuelType","fuelInfo","Object","entries","length","console","log","TodaysPrice","CustomRegionsAvgHighLow","AvgPrice","WholesaleTodayAveragePrice","DontBuyMoreThan","CustomRegion25PercentilePrices","Price","GraphJSON","App","useState","setFuelType","setFuelInfo","useEffect","fetchUrl","a","fetch","response","json","responseJSON","getFuelData","value","onChange","event","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c3b4363.chunk.js","sourcesContent":["const fetchUrlList = {\r\n  \"unleaded-91\":\r\n    \"https://corsanywhere.herokuapp.com/https://www.racv.com.au/bin/racv/fuelprice.2.json\",\r\n  \"unleaded-95\":\r\n    \"https://corsanywhere.herokuapp.com/https://www.racv.com.au/bin/racv/fuelprice.5.json\",\r\n  \"unleaded-98\":\r\n    \"https://corsanywhere.herokuapp.com/https://www.racv.com.au/bin/racv/fuelprice.28json\",\r\n  diesel:\r\n    \"https://corsanywhere.herokuapp.com/https://www.racv.com.au/bin/racv/fuelprice.3.json\",\r\n  lpg:\r\n    \"https://corsanywhere.herokuapp.com/https://www.racv.com.au/bin/racv/fuelprice.24json\"\r\n};\r\n\r\nexport default fetchUrlList;\r\n","import React from \"react\";\r\n\r\nconst AveragesSummary = ({ todaySummary }) => {\r\n  const { todayRetail, todayWholesale, todayGuidance } = todaySummary;\r\n  return (\r\n    <div className=\"summary\">\r\n      <div className=\"summary-retail\">\r\n        <h5>Retail</h5>\r\n        <h3>{todayRetail}</h3>\r\n      </div>\r\n      <div className=\"summary-wholesale\">\r\n        <h5>Wholesale</h5>\r\n        <h3>{todayWholesale}</h3>\r\n      </div>\r\n      <div className=\"summary-guidance\">\r\n        <h5>Buy Below</h5>\r\n        <h3>{todayGuidance}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AveragesSummary;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst AveragesGraph = ({ graphData }) => {\r\n  const { x1: days, month, retail, wholesale } = graphData;\r\n  const monthNames = [\r\n    \"JAN\",\r\n    \"FEB\",\r\n    \"MAR\",\r\n    \"APR\",\r\n    \"MAY\",\r\n    \"JUN\",\r\n    \"JUL\",\r\n    \"AUG\",\r\n    \"SEP\",\r\n    \"OCT\",\r\n    \"NOV\",\r\n    \"DEC\"\r\n  ];\r\n  const date = days.map((day, index) => monthNames[month[index]] + \" \" + day);\r\n  const fuelData = {\r\n    labels: date,\r\n    datasets: [\r\n      {\r\n        label: \"Retail\",\r\n        data: retail,\r\n        fill: false,\r\n        backgroundColor: \"#ff9933\",\r\n        boarderColor: \"#ff9933\"\r\n      },\r\n      {\r\n        label: \"Wholesale\",\r\n        data: wholesale,\r\n        fill: false,\r\n        backgroundColor: \"#0099ff\",\r\n        boarderColor: \"#0099ff\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph\" id=\"graph\">\r\n      <Line data={fuelData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AveragesGraph;\r\n","import React from \"react\";\r\nimport AveragesSummary from \"./AveragesSummary\";\r\nimport AveragesGraph from \"./AveragesGraph\";\r\n\r\nconst Averages = ({ fuelType, fuelInfo }) => {\r\n  if (Object.entries(fuelInfo.data).length === 0) {\r\n    return <p>Loading...</p>;\r\n  }\r\n  console.log(fuelInfo);\r\n  const todaySummary = {\r\n    todayRetail: fuelInfo.data.TodaysPrice.CustomRegionsAvgHighLow[0].AvgPrice,\r\n    todayWholesale: fuelInfo.data.WholesaleTodayAveragePrice,\r\n    todayGuidance:\r\n      fuelInfo.data.DontBuyMoreThan.CustomRegion25PercentilePrices[0].Price\r\n  };\r\n\r\n  const graphData = fuelInfo.data.GraphJSON;\r\n\r\n  return (\r\n    <div className=\"averages-trends\" id=\"averages-trends\">\r\n      <AveragesSummary todaySummary={todaySummary} />\r\n      <AveragesGraph graphData={graphData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Averages;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport fetchUrlList from \"./fetchUrlList\";\nimport Averages from \"./components/Averages\";\n\nfunction App() {\n  const [fuelType, setFuelType] = useState(\"unleaded-91\");\n  const [fuelInfo, setFuelInfo] = useState({ data: {} });\n\n  useEffect(() => {\n    setFuelInfo({ data: {} });\n    let fetchUrl = fetchUrlList[fuelType];\n    const getFuelData = async () => {\n      const response = await fetch(fetchUrl);\n      const responseJSON = await response.json();\n      setFuelInfo({ data: responseJSON });\n    };\n    getFuelData();\n    console.log(\"fuel data fetched for \" + { fuelType });\n  }, [fuelType]);\n\n  const fuelTypeChange = event => {\n    event.preventDefault();\n    setFuelType(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <select\n          className=\"fuel-type\"\n          id=\"fuel-type\"\n          value={fuelType}\n          onChange={fuelTypeChange}\n        >\n          <option value=\"unleaded-91\">Unleaded 91</option>\n          <option value=\"unleaded-95\">Unleaded 95</option>\n          <option value=\"unleaded-98\">Unleaded 98</option>\n          <option value=\"diesel\">Diesel</option>\n          <option value=\"lpg\">LPG</option>\n        </select>\n      </header>\n      <section>\n        <Averages fuelType={fuelType} fuelInfo={fuelInfo} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}