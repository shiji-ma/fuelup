{"version":3,"sources":["components/Header.js","components/UserContext.js","components/UserInfo.js","components/FuelContext.js","components/FuelInfo.js","App.js","serviceWorker.js","index.js"],"names":["Header","UserContext","createContext","UserProvider","props","useState","latitude","longitude","locality","userPos","setUserPos","useEffect","navigator","geolocation","getCurrentPosition","position","coords","console","info","error","warn","code","message","enableHighAccuracy","timeout","maximumAge","getUserPos","Provider","value","children","UserInfo","useContext","id","FuelContext","FuelProvider","fuelPrices","setFuelPrices","axios","urlPrefix","then","response","data","FuelInfo","log","GraphJSON","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"2NAUeA,G,YARA,WACb,OACE,6BACE,oD,OCHOC,EAAcC,0BAEdC,EAAe,SAAAC,GAAU,IAAD,EACLC,mBAAS,CACrCC,SAAU,KACVC,UAAW,KACXC,SAAU,OAJuB,mBAC5BC,EAD4B,KACnBC,EADmB,KAwCnC,OAjCAC,qBAAU,YACW,WACjB,GAAIC,UAAUC,YAAa,CAqBzBD,UAAUC,YAAYC,oBApBH,SAAAC,GACjB,IAAMT,EAAWS,EAASC,OAAOV,SAC3BC,EAAYQ,EAASC,OAAOT,UAClCG,EAAW,CACTJ,SAAUA,EACVC,UAAWA,IAEbU,QAAQC,KAAK,wCAGE,SAAAC,GACfF,QAAQG,KAAR,4BAAkCD,EAAME,KAAxC,cAAkDF,EAAMG,YAGvC,CACjBC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,KAUlBC,KACC,IAGD,kBAACzB,EAAY0B,SAAb,CAAsBC,MAAO,CAACnB,EAASC,IACpCN,EAAMyB,WClCEC,EATE,WAAO,IAAD,EACHC,qBAAW9B,GAAtBQ,EADc,oBAErB,OACE,yBAAKuB,GAAG,iBAAR,oBACoBvB,EAAQH,SAD5B,KACwCG,EAAQF,Y,iBCJvC0B,EAAc/B,0BAEdgC,EAAe,SAAA9B,GAAU,IAAD,EACCC,mBAAS,IADV,mBAC5B8B,EAD4B,KAChBC,EADgB,KAcnC,OAXAzB,qBAAU,WAMN0B,IADYC,yFACDC,MAAK,SAAAC,GAAQ,OAAIJ,EAAcI,EAASC,WAGpD,IAGD,kBAACR,EAAYN,SAAb,CAAsBC,MAAO,CAACO,EAAYC,IACvChC,EAAMyB,WCPEa,EAXE,WAAO,IAAD,EACAX,qBAAWE,GAAzBE,EADc,oBAIrB,OADAlB,QAAQ0B,IAAIR,EAAWS,WAErB,yBAAKZ,GAAG,eAAR,WACU,6CADV,qBAHe,KCqBJa,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,8BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,UCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB3C,WACrBA,UAAU4C,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.82e094d8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to fuelup</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect, createContext } from \"react\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = props => {\r\n  const [userPos, setUserPos] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n    locality: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getUserPos = () => {\r\n      if (navigator.geolocation) {\r\n        const posSuccess = position => {\r\n          const latitude = position.coords.latitude;\r\n          const longitude = position.coords.longitude;\r\n          setUserPos({\r\n            latitude: latitude,\r\n            longitude: longitude\r\n          });\r\n          console.info(\"Geolocation obtained successfully\");\r\n        };\r\n\r\n        const posError = error => {\r\n          console.warn(`Geolocation ERROR(${error.code}): ${error.message}`);\r\n        };\r\n\r\n        const posOptions = {\r\n          enableHighAccuracy: true,\r\n          timeout: 5000,\r\n          maximumAge: 0\r\n        };\r\n\r\n        navigator.geolocation.getCurrentPosition(\r\n          posSuccess,\r\n          posError,\r\n          posOptions\r\n        );\r\n      }\r\n    };\r\n    getUserPos();\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={[userPos, setUserPos]}>\r\n      {props.children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { UserContext } from \"./UserContext\";\r\n\r\nconst UserInfo = () => {\r\n  const [userPos] = useContext(UserContext);\r\n  return (\r\n    <div id=\"user-location\">\r\n      Your location is {userPos.latitude}, {userPos.longitude}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React, { useState, useEffect, createContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const FuelContext = createContext();\r\n\r\nexport const FuelProvider = props => {\r\n  const [fuelPrices, setFuelPrices] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getFuelPrices = () => {\r\n      const urlPrefix = \"https://cors-anywhere.herokuapp.com/\";\r\n      const urlBase = \"https://www.racv.com.au/bin/racv/\";\r\n      const urlFile = \"fuelprice.2.json\";\r\n      const url = urlPrefix + urlBase + urlFile;\r\n      axios(url).then(response => setFuelPrices(response.data));\r\n    };\r\n    getFuelPrices();\r\n  }, []);\r\n\r\n  return (\r\n    <FuelContext.Provider value={[fuelPrices, setFuelPrices]}>\r\n      {props.children}\r\n    </FuelContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { FuelContext } from \"./FuelContext\";\r\n\r\nconst FuelInfo = () => {\r\n  const [fuelPrices] = useContext(FuelContext);\r\n  let priceToday = \"\";\r\n  console.log(fuelPrices.GraphJSON);\r\n  return (\r\n    <div id=\"fuel-prices\">\r\n      Today's <span>Unleaded 91</span> average price is {priceToday}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FuelInfo;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport UserInfo from \"./components/UserInfo\";\nimport FuelInfo from \"./components/FuelInfo\";\nimport { UserProvider } from \"./components/UserContext\";\nimport { FuelProvider } from \"./components/FuelContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n      </header>\n      <main>\n        <UserProvider>\n          <UserInfo />\n        </UserProvider>\n        <FuelProvider>\n          <FuelInfo />\n        </FuelProvider>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}